/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/selfstudy/vocabulary/examwords"],{

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CDuck%20Triton%20Predator%5CDesktop%5CFinalProject%5Cenglish-website%5Cfrontend%5Cpages%5Cselfstudy%5Cvocabulary%5Cexamwords.js&page=%2Fselfstudy%2Fvocabulary%2Fexamwords!":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CDuck%20Triton%20Predator%5CDesktop%5CFinalProject%5Cenglish-website%5Cfrontend%5Cpages%5Cselfstudy%5Cvocabulary%5Cexamwords.js&page=%2Fselfstudy%2Fvocabulary%2Fexamwords! ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/selfstudy/vocabulary/examwords\",\n      function () {\n        return __webpack_require__(/*! ./pages/selfstudy/vocabulary/examwords.js */ \"./pages/selfstudy/vocabulary/examwords.js\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/selfstudy/vocabulary/examwords\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1DJTNBJTVDVXNlcnMlNUNEdWNrJTIwVHJpdG9uJTIwUHJlZGF0b3IlNUNEZXNrdG9wJTVDRmluYWxQcm9qZWN0JTVDZW5nbGlzaC13ZWJzaXRlJTVDZnJvbnRlbmQlNUNwYWdlcyU1Q3NlbGZzdHVkeSU1Q3ZvY2FidWxhcnklNUNleGFtd29yZHMuanMmcGFnZT0lMkZzZWxmc3R1ZHklMkZ2b2NhYnVsYXJ5JTJGZXhhbXdvcmRzISIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLDRGQUEyQztBQUNsRTtBQUNBO0FBQ0EsT0FBTyxJQUFVO0FBQ2pCLE1BQU0sVUFBVTtBQUNoQjtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9zZWxmc3R1ZHkvdm9jYWJ1bGFyeS9leGFtd29yZHNcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCIuL3BhZ2VzL3NlbGZzdHVkeS92b2NhYnVsYXJ5L2V4YW13b3Jkcy5qc1wiKTtcbiAgICAgIH1cbiAgICBdKTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cuX19ORVhUX1AucHVzaChbXCIvc2VsZnN0dWR5L3ZvY2FidWxhcnkvZXhhbXdvcmRzXCJdKVxuICAgICAgfSk7XG4gICAgfVxuICAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CDuck%20Triton%20Predator%5CDesktop%5CFinalProject%5Cenglish-website%5Cfrontend%5Cpages%5Cselfstudy%5Cvocabulary%5Cexamwords.js&page=%2Fselfstudy%2Fvocabulary%2Fexamwords!\n"));

/***/ }),

/***/ "./pages/selfstudy/vocabulary/examwords.js":
/*!*************************************************!*\
  !*** ./pages/selfstudy/vocabulary/examwords.js ***!
  \*************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst ExamWordsPage = ()=>{\n    const examWords = [\n        {\n            word: 'Analyze',\n            meaning: 'Examine (something) methodically and in detail, typically to explain and interpret it.',\n            example: 'You should analyze the data carefully before making a conclusion.'\n        },\n        {\n            word: 'Synthesize',\n            meaning: 'Combine (a number of things) into a coherent whole.',\n            example: 'We synthesize information from several sources to create our own report.'\n        },\n        {\n            word: 'Assess',\n            meaning: 'Evaluate or estimate the nature, ability, or quality of something.',\n            example: 'The teacher will assess your understanding through a series of questions.'\n        },\n        {\n            word: 'Elaborate',\n            meaning: 'To explain something in more detail.',\n            example: 'Please elaborate on your point so we can understand it better.'\n        },\n        {\n            word: 'Justify',\n            meaning: 'Show or prove to be right or reasonable.',\n            example: 'You need to justify your answer with clear reasoning.'\n        },\n        {\n            word: 'Evaluate',\n            meaning: 'Form an idea of the amount, number, or value of; assess.',\n            example: 'You must evaluate the pros and cons before making a decision.'\n        },\n        {\n            word: 'Contrast',\n            meaning: 'Compare in such a way as to emphasize differences.',\n            example: 'The essay asked students to contrast two different theories.'\n        },\n        {\n            word: 'Interpret',\n            meaning: 'Explain the meaning of (information, words, or actions).',\n            example: 'The student was asked to interpret the poem in her own words.'\n        },\n        {\n            word: 'Summarize',\n            meaning: 'Give a brief statement of the main points of (something).',\n            example: 'Can you summarize the main points of the lecture?'\n        },\n        {\n            word: 'Infer',\n            meaning: 'Deduce or conclude (information) from evidence and reasoning rather than from explicit statements.',\n            example: 'From the data, we can infer that the population is growing.'\n        },\n        {\n            word: 'Compare',\n            meaning: 'Estimate, measure, or note the similarity or dissimilarity between.',\n            example: 'Compare the two products and choose the best one.'\n        },\n        {\n            word: 'Describe',\n            meaning: 'Give a detailed account in words of.',\n            example: 'Please describe the process in detail.'\n        },\n        {\n            word: 'Explain',\n            meaning: 'Make (an idea, situation, or problem) clear to someone by describing it in more detail or revealing relevant facts or ideas.',\n            example: 'Can you explain how this machine works?'\n        },\n        {\n            word: 'Define',\n            meaning: 'State or describe exactly the nature, scope, or meaning of.',\n            example: 'How would you define success?'\n        },\n        {\n            word: 'Illustrate',\n            meaning: 'Explain or make (something) clear by using examples, charts, pictures, etc.',\n            example: 'The professor used a diagram to illustrate the concept.'\n        },\n        {\n            word: 'Classify',\n            meaning: 'Arrange (a group of people or things) in classes or categories according to shared qualities or characteristics.',\n            example: 'We need to classify the documents by date.'\n        },\n        {\n            word: 'Argue',\n            meaning: 'Give reasons or cite evidence in support of an idea, action, or theory, typically with the aim of persuading others to share one\\'s view.',\n            example: 'She argued that the new policy would benefit the company.'\n        },\n        {\n            word: 'Debate',\n            meaning: 'Argue about (a subject), especially in a formal manner.',\n            example: 'The candidates will debate the issues on live television.'\n        },\n        {\n            word: 'Critique',\n            meaning: 'Evaluate (a theory or practice) in a detailed and analytical way.',\n            example: 'The professor critiqued the student\\'s thesis.'\n        },\n        {\n            word: 'Formulate',\n            meaning: 'Create or devise methodically (a strategy or a proposal).',\n            example: 'We need to formulate a plan to improve sales.'\n        },\n        {\n            word: 'Investigate',\n            meaning: 'Carry out a systematic or formal inquiry to discover and examine the facts of (an incident, allegation, etc.) so as to establish the truth.',\n            example: 'The police are investigating the crime.'\n        },\n        {\n            word: 'Summarize',\n            meaning: 'Give a brief statement of the main points of (something).',\n            example: 'Can you summarize the main points of the lecture?'\n        },\n        {\n            word: 'Predict',\n            meaning: 'Say or estimate that (a specified thing) will happen in the future or will be a consequence of something.',\n            example: 'Experts predict that the economy will improve next year.'\n        },\n        {\n            word: 'Propose',\n            meaning: 'Put forward (an idea or plan) for consideration or discussion by others.',\n            example: 'She proposed a new strategy for the project.'\n        },\n        {\n            word: 'Outline',\n            meaning: 'Give a summary of (something).',\n            example: 'The report outlines the main points of the study.'\n        },\n        {\n            word: 'Summarize',\n            meaning: 'Give a brief statement of the main points of (something).',\n            example: 'Can you summarize the main points of the lecture?'\n        },\n        {\n            word: 'Hypothesize',\n            meaning: 'Put (something) forward as a hypothesis.',\n            example: 'Scientists hypothesize that the disease is caused by a virus.'\n        },\n        {\n            word: 'Examine',\n            meaning: 'Inspect (someone or something) in detail to determine their nature or condition; investigate thoroughly.',\n            example: 'The doctor examined the patient carefully.'\n        },\n        {\n            word: 'Articulate',\n            meaning: 'Express (an idea or feeling) fluently and coherently.',\n            example: 'She was able to articulate her thoughts clearly during the presentation.'\n        },\n        {\n            word: 'Constitute',\n            meaning: 'Be (a part) of a whole.',\n            example: 'These documents constitute the official record of the proceedings.'\n        },\n        {\n            word: 'Depict',\n            meaning: 'Show or represent by a drawing, painting, or other art form.',\n            example: 'The mural depicts scenes from the city\\'s history.'\n        },\n        {\n            word: 'Facilitate',\n            meaning: 'Make (an action or process) easy or easier.',\n            example: 'The new software will facilitate the task of data analysis.'\n        },\n        {\n            word: 'Implement',\n            meaning: 'Put (a decision, plan, agreement, etc.) into effect.',\n            example: 'The company decided to implement the new policy next month.'\n        },\n        {\n            word: 'Mitigate',\n            meaning: 'Make less severe, serious, or painful.',\n            example: 'Measures need to be taken to mitigate the environmental impact of the project.'\n        },\n        {\n            word: 'Perceive',\n            meaning: 'Become aware or conscious of (something); come to realize or understand.',\n            example: 'He could not perceive any difference between the two designs.'\n        },\n        {\n            word: 'Reiterate',\n            meaning: 'Say something again or a number of times, typically for emphasis or clarity.',\n            example: 'The teacher reiterated the importance of completing the assignments on time.'\n        },\n        {\n            word: 'Substantiate',\n            meaning: 'Provide evidence to support or prove the truth of.',\n            example: 'The scientist was able to substantiate his theory with extensive research.'\n        },\n        {\n            word: 'Undermine',\n            meaning: 'Erode the base or foundation of (a rock formation).',\n            example: 'The constant criticism was beginning to undermine her confidence.'\n        },\n        {\n            word: 'Validate',\n            meaning: 'Check or prove the validity or accuracy of (something).',\n            example: 'The results of the experiment validated the hypothesis.'\n        },\n        {\n            word: 'Accentuate',\n            meaning: 'Make more noticeable or prominent.',\n            example: 'The bright colors accentuate the design of the room.'\n        },\n        {\n            word: 'Advocate',\n            meaning: 'Publicly recommend or support.',\n            example: 'She advocates for equal rights for all citizens.'\n        },\n        {\n            word: 'Bolster',\n            meaning: 'Support or strengthen; prop up.',\n            example: 'The new evidence bolstered his argument.'\n        },\n        {\n            word: 'Consolidate',\n            meaning: 'Make (something) physically stronger or more solid.',\n            example: 'The company plans to consolidate its operations in one location.'\n        },\n        {\n            word: 'Disseminate',\n            meaning: 'Spread (something, especially information) widely.',\n            example: 'The organization aims to disseminate knowledge about healthy living.'\n        },\n        {\n            word: 'Exacerbate',\n            meaning: 'Make (a problem, bad situation, or negative feeling) worse.',\n            example: 'The new law only exacerbated the problem of illegal immigration.'\n        },\n        {\n            word: 'Exemplify',\n            meaning: 'Be a typical example of.',\n            example: 'The building exemplifies the architectural style of the period.'\n        },\n        {\n            word: 'Galvanize',\n            meaning: 'Shock or excite (someone) into taking action.',\n            example: 'The speech galvanized the crowd into action.'\n        },\n        {\n            word: 'Incorporate',\n            meaning: 'Take in or contain (something) as part of a whole; include.',\n            example: 'The new design incorporates the latest technology.'\n        },\n        {\n            word: 'Instigate',\n            meaning: 'Bring about or initiate (an action or event).',\n            example: 'The government will instigate new measures to combat crime.'\n        },\n        {\n            word: 'Negate',\n            meaning: 'Nullify; make ineffective.',\n            example: 'The benefits of the policy were negated by the high costs.'\n        },\n        {\n            word: 'Obfuscate',\n            meaning: 'Render obscure, unclear, or unintelligible.',\n            example: 'The report was written in a way that obfuscated its main points.'\n        },\n        {\n            word: 'Proliferate',\n            meaning: 'Increase rapidly in numbers; multiply.',\n            example: 'The use of smartphones has proliferated in recent years.'\n        },\n        {\n            word: 'Scrutinize',\n            meaning: 'Examine or inspect closely and thoroughly.',\n            example: 'The detective scrutinized the evidence carefully.'\n        },\n        {\n            word: 'Supersede',\n            meaning: 'Take the place of (a person or thing previously in authority or use); supplant.',\n            example: 'The new regulations will supersede the old ones.'\n        },\n        {\n            word: 'Transcend',\n            meaning: 'Be or go beyond the range or limits of (something abstract, typically a conceptual field or division).',\n            example: 'Her performance transcended all expectations.'\n        },\n        {\n            word: 'Utilize',\n            meaning: 'Make practical and effective use of.',\n            example: 'The company plans to utilize solar energy to power its operations.'\n        },\n        {\n            word: 'Vindicate',\n            meaning: 'Clear (someone) of blame or suspicion.',\n            example: 'The evidence vindicated her claim of innocence.'\n        },\n        {\n            word: 'Yield',\n            meaning: 'Produce or provide (a natural, agricultural, or industrial product).',\n            example: 'The farm yields enough produce to supply the local market.'\n        }\n    ];\n    const makeWordBoldWithLink = (word, sentence)=>{\n        const regex = new RegExp(\"\\\\b(\".concat(word, \")\\\\b\"), 'gi');\n        return sentence.replace(regex, \"<strong>$1</strong>\");\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: styles.container,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                style: styles.header,\n                children: \"Từ vựng cho k\\xec thi\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Duck Triton Predator\\\\Desktop\\\\FinalProject\\\\english-website\\\\frontend\\\\pages\\\\selfstudy\\\\vocabulary\\\\examwords.js\",\n                lineNumber: 304,\n                columnNumber: 13\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: styles.wordList,\n                children: examWords.map((wordData, index)=>{\n                    const link = \"https://en.wiktionary.org/wiki/\".concat(wordData.word.toLowerCase());\n                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                        href: link,\n                        target: \"_blank\",\n                        rel: \"noopener noreferrer\",\n                        style: styles.cardLink,\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: styles.card,\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                    style: styles.word,\n                                    children: wordData.word\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Duck Triton Predator\\\\Desktop\\\\FinalProject\\\\english-website\\\\frontend\\\\pages\\\\selfstudy\\\\vocabulary\\\\examwords.js\",\n                                    lineNumber: 317,\n                                    columnNumber: 33\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    style: styles.meaning,\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                            children: \"Meaning:\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\Duck Triton Predator\\\\Desktop\\\\FinalProject\\\\english-website\\\\frontend\\\\pages\\\\selfstudy\\\\vocabulary\\\\examwords.js\",\n                                            lineNumber: 319,\n                                            columnNumber: 37\n                                        }, undefined),\n                                        \" \",\n                                        wordData.meaning\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\Duck Triton Predator\\\\Desktop\\\\FinalProject\\\\english-website\\\\frontend\\\\pages\\\\selfstudy\\\\vocabulary\\\\examwords.js\",\n                                    lineNumber: 318,\n                                    columnNumber: 33\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    style: styles.example,\n                                    dangerouslySetInnerHTML: {\n                                        __html: \"<strong>Example:</strong> \".concat(makeWordBoldWithLink(wordData.word, wordData.example))\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\Duck Triton Predator\\\\Desktop\\\\FinalProject\\\\english-website\\\\frontend\\\\pages\\\\selfstudy\\\\vocabulary\\\\examwords.js\",\n                                    lineNumber: 321,\n                                    columnNumber: 33\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\Duck Triton Predator\\\\Desktop\\\\FinalProject\\\\english-website\\\\frontend\\\\pages\\\\selfstudy\\\\vocabulary\\\\examwords.js\",\n                            lineNumber: 316,\n                            columnNumber: 29\n                        }, undefined)\n                    }, index, false, {\n                        fileName: \"C:\\\\Users\\\\Duck Triton Predator\\\\Desktop\\\\FinalProject\\\\english-website\\\\frontend\\\\pages\\\\selfstudy\\\\vocabulary\\\\examwords.js\",\n                        lineNumber: 309,\n                        columnNumber: 25\n                    }, undefined);\n                })\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\Duck Triton Predator\\\\Desktop\\\\FinalProject\\\\english-website\\\\frontend\\\\pages\\\\selfstudy\\\\vocabulary\\\\examwords.js\",\n                lineNumber: 305,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\Duck Triton Predator\\\\Desktop\\\\FinalProject\\\\english-website\\\\frontend\\\\pages\\\\selfstudy\\\\vocabulary\\\\examwords.js\",\n        lineNumber: 303,\n        columnNumber: 9\n    }, undefined);\n};\n_c = ExamWordsPage;\nconst styles = {\n    container: {\n        padding: '2rem 5%',\n        minHeight: '90vh',\n        backgroundColor: '#f9f9f9'\n    },\n    header: {\n        fontSize: '2.5rem',\n        fontWeight: 'bold',\n        color: '#38b2ac',\n        textAlign: 'center',\n        marginBottom: '2rem'\n    },\n    wordList: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',\n        gap: '1.5rem'\n    },\n    cardLink: {\n        textDecoration: 'none'\n    },\n    card: {\n        backgroundColor: '#fff',\n        padding: '1.5rem',\n        minHeight: '200px',\n        borderRadius: '8px',\n        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n        transition: 'transform 0.2s, box-shadow 0.2s',\n        textAlign: 'left',\n        cursor: 'pointer'\n    },\n    word: {\n        fontSize: '1.5rem',\n        fontWeight: 'bold',\n        color: '#00796b',\n        marginBottom: '0.5rem',\n        textAlign: 'center'\n    },\n    meaning: {\n        fontSize: '1rem',\n        color: '#555',\n        marginBottom: '0.5rem'\n    },\n    example: {\n        fontSize: '1rem',\n        color: '#20ab55'\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ExamWordsPage);\nvar _c;\n$RefreshReg$(_c, \"ExamWordsPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/selfstudy/vocabulary/examwords.js\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["pages/_app","main"], () => (__webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5CDuck%20Triton%20Predator%5CDesktop%5CFinalProject%5Cenglish-website%5Cfrontend%5Cpages%5Cselfstudy%5Cvocabulary%5Cexamwords.js&page=%2Fselfstudy%2Fvocabulary%2Fexamwords!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);